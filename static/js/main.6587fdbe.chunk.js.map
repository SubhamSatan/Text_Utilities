{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","placeholder","onClick","toggleMode","role","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","sp","split","i","length","join","AltText","reverse","morseCode","map","el","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6587fdbe.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/aboutText\">{props.aboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form>\r\n                    <div className={`form-check form-switch text-${props.mode=== 'light'?'dark':'light'} mx-3`}>\r\n                       <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                       <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React, {useState} from 'react'\r\n\r\n\r\nfunction TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\",\"success\");\r\n    }\r\n\r\n    const handleLowClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\",\"success\");\r\n    }\r\n    \r\n    const handleOnChange = (event) =>{\r\n        // console.log(event);\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleRevClick = () =>{\r\n\r\n        function reverseString(str) {\r\n            // // Step 1. Use the split() method to return a new array\r\n            // var splitString = str.split(\"\"); // var splitString = \"hello\".split(\"\");\r\n            // // [\"h\", \"e\", \"l\", \"l\", \"o\"]\r\n         \r\n            // // Step 2. Use the reverse() method to reverse the new created array\r\n            // var reverseArray = splitString.reverse(); // var reverseArray = [\"h\", \"e\", \"l\", \"l\", \"o\"].reverse();\r\n            // // [\"o\", \"l\", \"l\", \"e\", \"h\"]\r\n         \r\n            // // Step 3. Use the join() method to join all elements of the array into a string\r\n            // var joinArray = reverseArray.join(\"\"); // var joinArray = [\"o\", \"l\", \"l\", \"e\", \"h\"].join(\"\");\r\n            // // \"olleh\"\r\n            \r\n            // //Step 4. Return the reversed string\r\n            // return joinArray; // \"olleh\"\r\n\r\n            //SHORTHAND VERSION\r\n            return str.split(\"\").reverse().join(\"\");\r\n        }\r\n        const newText = reverseString(text);\r\n        setText(newText);\r\n        props.showAlert(\"Converted to ReverseCase\",\"success\");\r\n    }\r\n\r\n    const handleAltClick = () =>{\r\n\r\n         function AltText(text)\r\n         {\r\n             console.log(text)\r\n            var sp = text.split(\"\");\r\n            for(let i=0;i<sp.length;i+=2)\r\n            {\r\n                    sp[i]=sp[i].toUpperCase();\r\n            }\r\n            console.log(sp);\r\n            return sp.join(\"\");\r\n\r\n         }\r\n          let newText = AltText(text);\r\n          setText(newText);\r\n          props.showAlert(\"Converted to ALternativeCase\",\"success\");\r\n    }\r\n\r\n    const handleMorseClick = () =>{\r\n        const morseCode = {\r\n            \"A\": \".-\",\r\n            \"B\": \"-...\",\r\n            \"C\": \"-.-.\",\r\n            \"D\": \"-..\",\r\n            \"E\": \".\",\r\n            \"F\": \"..-.\",\r\n            \"G\": \"--.\",\r\n            \"H\": \"....\",\r\n            \"I\": \"..\",\r\n            \"J\": \".---\",\r\n            \"K\": \"-.-\",\r\n            \"L\": \".-..\",\r\n            \"M\": \"--\",\r\n            \"N\": \"-.\",\r\n            \"O\": \"---\",\r\n            \"P\": \".--.\",\r\n            \"Q\": \"--.-\",\r\n            \"R\": \".-.\",\r\n            \"S\": \"...\",\r\n            \"T\": \"-\",\r\n            \"U\": \"..-\",\r\n            \"W\": \".--\",\r\n            \"X\": \"-..-\",\r\n            \"Y\": \"-.--\",\r\n            \"Z\": \"--..\"\r\n         }\r\n         const convertToMorse = (str) => {\r\n            return str.toUpperCase().split(\"\").map(el => {\r\n               return morseCode[el] ? morseCode[el] : el;\r\n            }).join(\"\");\r\n         };\r\n         const newText = convertToMorse(text);\r\n         setText(newText);\r\n         props.showAlert(\"Morsed  the Text\",\"success\");\r\n    }\r\n\r\n    const handleClearText = () =>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Cleared the Text\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <> \r\n    <div className=\"container\" style={{color: props.mode=== 'dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n     <div className=\"mb-3\">\r\n       <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode=== 'dark'?'grey':'white' , color: props.mode=== 'dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n     </div>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Upper Case</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Lower Case</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleAltClick}>aLtErNaTe cAsE</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleRevClick}>Reverse Case</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleMorseClick}>Morse Code Converter</button>\r\n     <button className=\"btn btn-primary mx-2\" onClick={handleClearText}>Clear Text</button>\r\n     </div>\r\n     <div className=\"container my-3\" style={{color: props.mode=== 'dark'?'white':'#042743'}}>\r\n         <h1>Your Text Summary</h1>\r\n         <p>{text.split(\" \").length} Words and  {text.length} Characters</p>\r\n         <p>{text.split(\" \").length * 0.08} Minutes Read</p>\r\n         <h3>Preview</h3>\r\n         <p>{text.length>0?text:\"Enter Something to Preview\"}</p>\r\n     </div>\r\n     </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n\r\n\r\n//If props.alert is null then we wont get the part after the null statement but if props.a;ert is not null thne\r\n// we will get the function after the &&\r\n//This is because all the JSX gets called to js calls ","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  \n  const[mode , setMode] = useState('light');  // whether dark mode is enabled or not \n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() =>\n    {\n      setAlert(null);\n    }, 1500)\n  }\n\n  const toggleMode = ()=>{\n    if( mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been enabled\" , \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\" , \"success\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About_TextUtils\"  mode={mode} toggleMode={toggleMode}/> \n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/aboutText\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n             <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below: \" mode={mode} />\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* <About/> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}